# ================================================================
# MULTI-STAGE BUILD - Оптимизированный Docker образ
# ================================================================
# Два этапа:
# 1. Builder - компиляция приложения
# 2. Runtime - минимальный образ для запуска

# ================================================================
# ЭТАП 1: BUILDER - Компиляция приложения
# ================================================================
# Используем полный Go образ для сборки
FROM golang:1.25-alpine AS builder

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Устанавливаем необходимые системные пакеты
# git - для go mod download (некоторые модули требуют git)
# ca-certificates - SSL сертификаты для HTTPS запросов
RUN apk add --no-cache git ca-certificates

# === КЕШИРОВАНИЕ ЗАВИСИМОСТЕЙ ===
# Копируем только go.mod и go.sum сначала
# Docker кеширует этот слой, если файлы не изменились
# Это ускоряет пересборку (зависимости скачиваются только при изменении go.mod)
COPY go.mod go.sum ./

# Скачиваем зависимости
# Этот слой будет закеширован, если go.mod/go.sum не изменились
RUN go mod download

# === КОПИРОВАНИЕ ИСХОДНОГО КОДА ===
# Теперь копируем весь код приложения
COPY . .

# === КОМПИЛЯЦИЯ ===
# Собираем бинарник
# -o /app/api - выходной файл
# cmd/api/main.go - точка входа
# CGO_ENABLED=0 - отключаем CGO (для статической сборки)
# GOOS=linux - целевая ОС
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o /app/api cmd/api/main.go

# ================================================================
# ЭТАП 2: RUNTIME - Минимальный образ для запуска
# ================================================================
# Используем alpine - минимальный Linux (5MB вместо 1GB!)
FROM alpine:latest

# Устанавливаем ca-certificates для HTTPS
RUN apk --no-cache add ca-certificates

# Создаём непривилегированного пользователя (безопасность)
# Не запускаем приложение от root!
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Рабочая директория
WORKDIR /home/appuser

# === КОПИРОВАНИЕ ИЗ BUILDER ===
# Копируем ТОЛЬКО скомпилированный бинарник из builder этапа
# Не копируем исходный код, зависимости, и т.д.
COPY --from=builder /app/api .

# Меняем владельца файла на appuser
RUN chown -R appuser:appgroup /home/appuser

# Переключаемся на непривилегированного пользователя
USER appuser

# Открываем порт 8080
EXPOSE 8080

# Запускаем приложение
CMD ["./api"]

# ================================================================
# РАЗМЕР ОБРАЗА
# ================================================================
# С multi-stage build:
#   - Builder stage: ~500MB (не включается в финальный образ!)
#   - Runtime stage: ~15-20MB (только alpine + бинарник)
#
# Без multi-stage build:
#   - Один образ: ~500MB (весь Go toolchain + код)
#
# Выигрыш: 25x меньше! Быстрее деплой, меньше потребление ресурсов

