version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: advanced-api-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: advanced_api
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кеширования (опционально)
  # Раскомментируйте если добавите Redis в код
  # redis:
  #   image: redis:7-alpine
  #   container_name: advanced-api-redis
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # API приложение
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: advanced-api-app
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: advanced_api
      # REDIS_HOST: redis          # Раскомментируйте при использовании Redis
      # REDIS_PORT: 6379
      JWT_SECRET: your-secret-key-change-in-production
      SERVER_PORT: 8080
      GIN_MODE: release
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      # redis:                     # Раскомментируйте при использовании Redis
      #   condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # pgAdmin для управления PostgreSQL (опционально)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: advanced-api-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - app-network
    depends_on:
      - postgres

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:

