package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"advanced-user-api/internal/config"
	"advanced-user-api/internal/handler"
	"advanced-user-api/internal/repository"
	"advanced-user-api/internal/service"

	"github.com/gin-gonic/gin"
)

// ================================================================
// MAIN - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
// ================================================================

func main() {
	fmt.Println("=== üöÄ Advanced User Management API ===\n")

	// === –®–ê–ì 1: –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env –∏ environment variables
	cfg := config.Load()
	log.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

	// === –®–ê–ì 2: –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î ===
	// InitDB() –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ PostgreSQL –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç Auto Migration
	// GORM –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç —Ç–∞–±–ª–∏—Ü—É users –Ω–∞ –æ—Å–Ω–æ–≤–µ struct
	db, err := repository.InitDB(cfg)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err)
	}
	
	// defer - –∑–∞–∫—Ä–æ–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ main()
	defer func() {
		if err := repository.CloseDB(db); err != nil {
			log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:", err)
		}
	}()

	// === –®–ê–ì 3: –°–û–ó–î–ê–ù–ò–ï –°–õ–û–Å–í (Dependency Injection) ===
	// –°–æ–∑–¥–∞—ë–º —Å–ª–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
	
	// 3.1: Repository (—Ä–∞–±–æ—Ç–∞ —Å –ë–î)
	userRepo := repository.NewUserRepository(db)
	
	// 3.2: Services (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
	authService := service.NewAuthService(userRepo, cfg)
	userService := service.NewUserService(userRepo)
	
	// 3.3: Handlers (HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
	authHandler := handler.NewAuthHandler(authService, userService)
	userHandler := handler.NewUserHandler(userService)
	
	log.Println("‚úÖ –í—Å–µ —Å–ª–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

	// === –®–ê–ì 4: –ù–ê–°–¢–†–û–ô–ö–ê GIN ===
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º Gin (debug, release, test)
	gin.SetMode(cfg.GinMode)
	
	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π Gin —Ä–æ—É—Ç–µ—Ä
	// gin.Default() –≤–∫–ª—é—á–∞–µ—Ç:
	//   - Logger middleware (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤)
	//   - Recovery middleware (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ panic)
	router := gin.Default()
	
	log.Println("‚úÖ Gin —Ä–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")

	// === –®–ê–ì 5: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ú–ê–†–®–†–£–¢–û–í ===
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ HTTP endpoints
	handler.SetupRoutes(router, authHandler, userHandler, cfg)
	log.Println("‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

	// === –®–ê–ì 6: –°–û–ó–î–ê–ù–ò–ï HTTP –°–ï–†–í–ï–†–ê ===
	// –°–æ–∑–¥–∞—ë–º HTTP —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
	srv := &http.Server{
		Addr:    ":" + cfg.ServerPort,           // –ê–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, ":8080")
		Handler: router,                          // Gin —Ä–æ—É—Ç–µ—Ä –∫–∞–∫ handler
		
		// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
		ReadTimeout:  10 * time.Second,  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
		WriteTimeout: 10 * time.Second,  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞
		IdleTimeout:  120 * time.Second, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	}

	// === –®–ê–ì 7: –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –í –ì–û–†–£–¢–ò–ù–ï ===
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å graceful shutdown
	go func() {
		fmt.Printf("\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:%s\n\n", cfg.ServerPort)
		fmt.Println("üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
		fmt.Println("   PUBLIC (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞):")
		fmt.Println("     POST   /api/v1/auth/register  - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
		fmt.Println("     POST   /api/v1/auth/login     - –í—Ö–æ–¥")
		fmt.Println("     GET    /health                - Health check")
		fmt.Println("\n   PROTECTED (—Ç—Ä–µ–±—É—é—Ç JWT —Ç–æ–∫–µ–Ω):")
		fmt.Println("     GET    /api/v1/auth/me        - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
		fmt.Println("     GET    /api/v1/users          - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		fmt.Println("     GET    /api/v1/users/:id      - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("     PUT    /api/v1/users/:id      - –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("     DELETE /api/v1/users/:id      - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		fmt.Println("\nüí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
		
		// ListenAndServe() - –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä
		// –ë–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err)
		}
	}()

	// === –®–ê–ì 8: GRACEFUL SHUTDOWN ===
	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C –∏–ª–∏ kill)
	// –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
	
	// –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
	quit := make(chan os.Signal, 1)
	
	// signal.Notify() - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
	// SIGINT - Ctrl+C
	// SIGTERM - kill –∫–æ–º–∞–Ω–¥–∞
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	
	// –ë–ª–æ–∫–∏—Ä—É–µ–º—Å—è –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
	<-quit
	log.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

	// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è graceful shutdown
	// –î–∞—ë–º —Å–µ—Ä–≤–µ—Ä—É 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// Shutdown() - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
	// –ñ–¥—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥)
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}


